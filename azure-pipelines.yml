# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'
    
- task: DockerCompose@0
  displayName: Start integration test dependencies (docker-compose)
  inputs:
    containerregistrytype: Container Registry
    dockerComposeFile: 'docker-compose-ci.yml'
    dockerComposeCommand: 'up -d'

- task: UseDotNet@2
  displayName: Installing .NET SDK
  inputs:
    packageType: 'sdk'
    version: '3.1.x'
    
- task: Bash@3
  inputs:
    targetType: 'filePath'
    filePath: ./wait-for-it.sh
    arguments: 'localhost:27018 -- echo "mongo is up"' # Optional
    #disableAutoCwd: false # Optional
    #cwd: '' # Optional
    #failOnStandardError: false

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Install .NET Core tools from local manifest'
  inputs:
    command: custom
    custom: tool
    arguments: 'restore'

- task: PowerShell@2
  displayName: 'Start mssqllocaldb'
  inputs:
    targetType: 'inline'
    script: 'sqllocaldb start mssqllocaldb'

- task: DotNetCoreCLI@2
  displayName: Run Tests
  inputs:
    command: test
    arguments: '--configuration $(buildConfiguration) --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    # publishTestResults: true
    projects: '**/*Tests/*.csproj'    



# - task: DotNetCoreCLI@2
  # displayName: Start integration testing
  # inputs:
    # command: test
    # arguments: '--configuration $(buildConfiguration) --filter TestCategory=Integration --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
    # publishTestResults: true
    # projects: '**/*Tests/*.csproj'
    
- task: DotNetCoreCLI@2
  displayName: 'Create code coverage report'
  inputs:
    command: custom
    custom: tool
    arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines;Cobertura;Badges'
    
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage report'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

